name: CI

on: [push, pull_request]

jobs:
  direct:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          # Add specific configuration for Windows
          - os: windows
            msystem: ucrt64
        exclude:
          - os: ubuntu
            python-version: '3.7'
          - os: ubuntu
            python-version: '3.8'
          - os: ubuntu
            python-version: '3.9'
          - os: ubuntu
            python-version: '3.10'
          - os: ubuntu
            python-version: '3.11'
          - os: ubuntu
            python-version: '3.12'
          # Run only the latest few 3.x versions on macOS
          - os: macos
            python-version: '3.7'
          - os: macos
            python-version: '3.8'
          - os: macos
            python-version: '3.9'
          - os: macos
            python-version: '3.10'
          - os: macos
            python-version: '3.11'
          - os: macos
            python-version: '3.12'
          # Exclude all Windows Python versions except 3.11
          - os: windows
            python-version: '3.7'
          - os: windows
            python-version: '3.8'
          - os: windows
            python-version: '3.9'
          - os: windows
            python-version: '3.10'
          - os: windows
            python-version: '3.12'

    steps:
      - name: Checkout pysam
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install prerequisite Python libraries
        if: runner.os != 'Windows'
        run: pip install cython pytest pytest-pep8 setuptools

      - name: Install Linux build prerequisites
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -q --no-install-recommends --no-install-suggests libcurl4-openssl-dev

      - name: Update macOS build prerequisites
        if: runner.os == 'macOS'
        run: |
          brew unlink xz || true

      - name: Install MSYS2 build prerequisites
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: >-
            base-devel
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-cython
            mingw-w64-ucrt-x86_64-python
            mingw-w64-ucrt-x86_64-python-pip
            mingw-w64-ucrt-x86_64-python-setuptools
            mingw-w64-ucrt-x86_64-curl
            mingw-w64-ucrt-x86_64-libdeflate
            mingw-w64-ucrt-x86_64-bzip2
            mingw-w64-ucrt-x86_64-zlib
            mingw-w64-ucrt-x86_64-python-pytest
            mingw-w64-ucrt-x86_64-xz
            mingw-w64-ucrt-x86_64-openssl
            mingw-w64-ucrt-x86_64-libtre
            mingw-w64-ucrt-x86_64-libiconv

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          python setup.py build

      - name: Build (Unix)
        if: runner.os != 'Windows'
        run: |
          python setup.py build

      - name: Install test prerequisites (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm mingw-w64-ucrt-x86_64-samtools mingw-w64-ucrt-x86_64-bcftools

      - name: Install test prerequisites (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install -q --no-install-recommends --no-install-suggests samtools bcftools tabix
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install -q samtools bcftools
          fi

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          export PYTHONPATH=$(echo $GITHUB_WORKSPACE/build/lib.*)
          export REF_PATH=':'
          pytest

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          export PYTHONPATH=$(echo $GITHUB_WORKSPACE/build/lib.*)
          export REF_PATH=':'
          pytest


  


  

      - name: Run tests
        run:  REF_PATH=':' pytest
